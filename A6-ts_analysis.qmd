---
title: "A6-ts_analysis"
author: "Jasper"
format: html
editor: visual
---

Script to 1) train the SARMAX models and 2) predict the NDVI per plot

```{r}
library(feasts)
library(tsibble)
library(zoo)
library(fable)
library(data.table)
library(tidyverse)
library(dplyr)
library(sf)
library(ggplot2)
library(scales)
```

# Import

```{r}
# Import the reflectance ts 
l8_ts <- read_csv('output/time_series/Countries_l8_ts.csv')

# Import the plot data
plots <- read_csv('output/plot_data/all_countries/Countries_plots_final.csv')

# Filter out the general time period of interest
l8_ts <- l8_ts[l8_ts$yearmon > as.Date('2013-01-01') & l8_ts$yearmon < as.Date('2022-11-01'),] # start L8 observatio
```

# Plot analysis

Create plot-specific tsibble

```{r}
# Create tsibble with monthly average ndvi and precipitation, lagged precipitation and interpolate the missing NDVI values
l8_ts_plt <- l8_ts %>% 
  group_by(plotID, yearmon) %>% 
  summarize(ndvi=mean(ndvi, na.rm=T),
            prcp=mean(prcp_month)) %>% 
  # Add lagged precipitation variables
  mutate(prcp_lag1=data.table::shift(prcp, n=1, type='lag'),
         prcp_lag2=data.table::shift(prcp, n=2, type='lag')) %>% 
  # Check if plot ts is all NAs and exclude
  mutate(entire_na = length(which(!is.na(ndvi))) == 0) %>% 
  filter(!entire_na) %>% 
  # Exclude NAs when at beginning or end of time series
  slice(min(which(!is.na(ndvi))):max(which(!is.na(ndvi)))) %>% 
  # Remove the entire.na column
  select(!entire_na) %>% 
  # Add country and county data to the summarised data
  left_join(plots[,c('country', 'county', 'plotID')], by='plotID') %>% 
  # Interpolate NDVI values
  mutate(yearmonth=yearmonth(as.character(yearmon)),
         ndvi_int=na.approx(ndvi)) %>% 
  # Convert to tsibble
  as_tsibble(key=plotID, index=yearmonth)

# Write plot tsibble
fwrite(l8_ts_plt, 'output/time_series/Countries_l8_plt.csv')

# Read plot ts data
l8_ts_plt <- read_csv('output/time_series/Countries_l8_plt.csv')

# Convert back to tsibble after reading 'l8_ts_plt'
l8_ts_plt <- l8_ts_plt %>% 
  mutate(yearmonth=yearmonth(as.character(yearmon))) %>% 
  as_tsibble(index=yearmonth, key=plotID)

# Split in reference and validation ts
l8_ref_plt <- l8_ts_plt %>% filter(year(yearmonth) < 2017)
l8_val_plt <- l8_ts_plt %>% filter(year(yearmonth) >= 2017)
```

```{r}
# Exclude plots with more than 22 NA in training period or 60 or more in total time series
l8_ts_plt <- l8_ts_plt %>% 
  group_by(plotID) %>% 
  mutate(na_training = if_else(yearmon < as.Date('2017-01-01') & is.na(ndvi), 1, 0),
         na_tr_sum = sum(na_training, na.rm=T),
         na = if_else(is.na(ndvi), 1, 0),
         na_sum = sum(na, na.rm=T)) %>% 
  select(!c('na','na_training')) %>% 
  filter(na_sum < 60,
         na_tr_sum < 23)
```

# Train and predict vegetation per plot with ARIMA

```{r}
# Train ARIMA models
l8_armax_plt <- l8_ref_plt %>% 
  model(ARIMA(ndvi_int ~ prcp + prcp_lag1 + prcp_lag2 + pdq(d=0) + PDQ(D=0), stepwise = T, ic='aicc'))

# Forecast with model and precipitation predictors
l8_fc_plt <- fabletools::forecast(l8_armax_plt, new_data = l8_val_plt[,c('yearmonth', 'prcp', 'prcp_lag1', 'prcp_lag2', 'plotID')])

# Extract 95% confidence levels
l8_plt_ci <- l8_fc_plt$ndvi_int %>% 
  hilo(level = 80) 
l8_fc_plt <- l8_fc_plt %>% 
  mutate(upper=l8_plt_ci$upper,
         lower=l8_plt_ci$lower)

# Save the models and predictions
save(l8_fc_plt, file = 'output/models/Countries_l8_fc_plt2.RDS')
save(l8_armax_plt, file = 'output/models/Countries_l8_armax_plt2.RDS')
load('output/models/Countries_l8_fc_plt2.RDS')
load('output/models/Countries_l8_armax_plt2.RDS')
```