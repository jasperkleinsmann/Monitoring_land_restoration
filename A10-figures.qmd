---
title: "A10-figures.qmd"
author: "Jasper"
format: html
editor: visual
---

Packages

```{r}
library(tidyverse)
library(scales)
library(lubridate)
library(BBmisc)
library(RColorBrewer)
library(plotROC)
library(mlbench)
library(pROC)
library(ggrepel)
library(feasts)
library(tsibble)
library(fable)
library(viridis)
library(plotly)
library(httpgd)
library(languageserver)
library(sf)
```

Set language to english

```{r}
Sys.setlocale("LC_TIME","en_US.UTF-8")
```

Import some important datasets

```{r}
l8_ts <- read_csv('output/time_series/Countries_l8_ts.csv')

l8_fc_plt_dt <- read_csv('output/time_series/Countries_ts_fc_plt2.csv')
l8_fc_plt_dt <- l8_fc_plt_dt %>% 
  mutate(yearmonth = yearmonth(yearmon))

load('output/models/Countries_l8_fc_plt2.RDS')

# Import the plots data in include the plant date in the graph
plots <- st_read(dsn='output/plot_data/all_countries/Countries_plots_green2.GeoJSON')
plots_dt <- tibble(plots)
admins <- st_read('output/plot_data/all_countries/Countries_admins.GeoJSON')

# Validation data
val_pnts <- st_read('data/validation_points.GeoJSON')
```


Cumlative regreening over time per country

```{r}
plots_dt %>% 
  group_by(country) %>% 
  arrange(green_date) %>% 
  summarise(country = first(country),
            green_cum = cumsum(Hectare[regreening==1]),
            total_area = sum(Hectare),
            perc_cum = green_cum/total_area,
            date = green_date[regreening==1]) %>% 
  ggplot()+
  geom_line(aes(x=date, green_cum, col=country),lwd=1)
```


Vegetation over time with forecast and prediction interval

```{r}
plt <- 'K343'

pdf(paste0('figures/prediction_',plt,'.pdf'), height = 4, width = 7)
l8_fc_plt %>% 
  filter(plotID==plt) %>% 
  mutate(ci_95 = hilo(ndvi_int,95),
         upper_95=ci_95$upper,
         lower_95=ci_95$lower,
         ci_80 = hilo(ndvi_int, 80),
         upper_80=ci_80$upper,
         lower_80=ci_80$lower,
         ci_50 = hilo(ndvi_int, 50),
         upper_50=ci_50$upper,
         lower_50=ci_50$lower) %>% 
  ggplot()+
  geom_point(data = l8_ts[l8_ts$plotID==plt,], aes(x = date, y = ndvi), alpha=0.2,size=2)+
  geom_ribbon(aes(x=as.Date(yearmonth), ymin=lower_80, ymax=upper_80), alpha=0.2, fill='orange')+
  geom_ribbon(aes(x=as.Date(yearmonth), ymin=lower_50, ymax=upper_50), alpha=0.3, fill='orange')+
  geom_line(data = l8_fc_plt_dt[l8_fc_plt_dt$plotID==plt,], aes(x=as.Date(yearmonth), y=ndvi_pred),
            col='brown',lwd=0.9,lty=2)+
  geom_line(data = l8_fc_plt_dt[l8_fc_plt_dt$plotID==plt,], aes(x = as.Date(yearmonth), y = ndvi_int),lwd=1,
            col='black')+
  annotate('text', x=as.Date('2021-02-01'),y=0.9, 
           label=paste('MAEp =',round(plt_stat_fit[plt_stat_fit$plotID==plt,]$mae,2)),
           size=3.5)+
  labs(y='NDVI')+
  theme(axis.title.x = element_blank(),
        panel.spacing = unit(0, "lines"),
        panel.background = element_rect(fill='white', colour='grey'),
        panel.grid.major = element_line(color='grey',linewidth = 0.1),
        axis.text = element_text(size=12),
        axis.title = element_text(size=14))+
  ylim(0,1)
dev.off()

```

Plot vegetation for one county including precipitation

```{r}
cnt <- 'Eastern'

pdf(paste0('figures/prediction_',cnt,'.pdf'), height = 4, width = 7)
l8_fc_plt_dt %>% 
  right_join(plots_dt %>% select(plotID, region), by='plotID') %>%
  filter(county == cnt) %>% 
  group_by(yearmonth) %>% 
  summarise(ndvi_int=mean(ndvi_int,na.rm=T),
            ndvi_pred=mean(ndvi_pred,na.rm=T),
            upper=mean(upper,na.rm=T),
            lower=mean(lower,na.rm=T),
            prcp= mean(prcp, na.rm=T),
            county=first(county)) %>% 
  ggplot()+
  geom_line(aes(x = yearmonth, y = ndvi_pred),lwd=0.9, col='brown',lty=2)+
  geom_line(aes(x = yearmonth, y = ndvi_int),lwd=0.8)+
  geom_line(aes(x = yearmonth, y = prcp/1200), col='darkblue',lty=2)+
  scale_y_continuous(
    name = 'NDVI',
    limits = c(0,0.8),
    sec.axis = sec_axis(~.*1200, name='Precipiation (mm/month)'))+
  labs(y='NDVI')+
  theme(axis.text.x=element_text(angle=0),
        axis.title.x = element_blank(),
        panel.spacing = unit(0, "lines"),
        panel.background = element_rect(fill='white', colour='grey'),
        panel.grid.major = element_line(color='grey',linewidth = 0.1),
        axis.text = element_text(size=12),
        axis.title = element_text(size=14))
dev.off()
```

Annual average vegetation for all counties > 1000 ha

```{r}
# Select countries with >1000 ha
county_1000 <- plt_stat_fit %>% 
  group_by(county) %>% 
  mutate(county_area = sum(Hectare)) %>% 
  filter(county_area>1000) %>% 
  select(county) %>% 
  unique()

county_yearly <- l8_fc_plt_dt %>% 
  tibble() %>% 
  filter(county %in% county_1000$county) %>% 
  group_by(county, year(yearmon)) %>% 
  summarise(ndvi=mean(ndvi, na.rm=T),
            year = first(yearmon),
            country = first(country),
            year_int = first(`year(yearmon)`)) %>% 
  filter(year >= as.Date('2014-01-01')) %>% 
  select(!`year(yearmon)`)
county_yearly$label <- NA
county_yearly$label[which(county_yearly$year == max(county_yearly$year))] <- 
  county_yearly$county[which(county_yearly$year == max(county_yearly$year))]

pdf('figures/annual_county.pdf', width=12, height=7)
county_yearly %>% 
  ggplot()+
  geom_line(aes(x=year_int, y=ndvi, col=country, group=county),show.legend = F)+
  scale_colour_viridis_d()+
  theme(axis.text.x=element_text(angle=45),
        axis.title.x = element_blank(),
        panel.spacing = unit(0, "lines"),
        panel.background = element_rect(fill='white', colour='grey'),
        panel.grid.major = element_line(color='grey',linewidth = 0.1),
        axis.text = element_text(size=12),
        axis.title = element_text(size=14))+
  facet_grid(~country, scales='free_x',space='free_x')+
  geom_label_repel(aes(x=year_int, y=ndvi, label=label), nudge_x = 1, size=3,alpha=0.65,na.rm=T)+
  labs(y='NDVI')
dev.off()
```


MAE per coutny - boxplots

```{r}
pdf('figures/mae_boxplot.pdf', height= 6, width=10)
plt_stat_fit %>% 
  #filter(Hectare < 10) %>% 
  group_by(county) %>% 
  mutate(county_area = sum(Hectare)) %>% 
  ungroup() %>% 
  filter(county_area > 1000) %>% 
  ggplot()+
  geom_boxplot(aes(x=county, y=mae, fill=country), alpha=0.05, show.legend = F)+
  facet_grid(~country, scales='free_x',space='free_x') + 
  theme(axis.title.x = element_blank(),
        panel.spacing = unit(0, "lines"),
        panel.background = element_rect(fill='white', colour='grey'),
        panel.grid.major = element_line(color='grey',linewidth = 0.1),
        axis.text.x=element_text(angle=90),
        axis.text = element_text(size=12),
        axis.title = element_text(size=14))+
  labs(y=expression('MAE'[p]))+
  ylim(0,2)
dev.off()
```


MAE per country per planting type

```{r}
# MAE per restoration practise -- boxplot
pdf('figures/mae_box_cntr_type.pdf', width=8,height=4)
plt_stat_fit  %>%  
  mutate(type = if_else(type=='fmnr', 'FMNR', 'TP')) %>% 
  ggplot() + 
  geom_boxplot(aes(x=country, y = mae, col = type), alpha=0.03)+
  scale_colour_brewer(palette="Accent", direction=-1, labels=c('FMNR','TP'))+
  theme(axis.title.x = element_blank(),
        panel.spacing = unit(0, "lines"),
        panel.background = element_rect(fill='white', colour='grey'),
        panel.grid.major = element_line(color='grey',linewidth = 0.1),
        axis.text.x=element_text(angle=0),
        axis.text = element_text(size=12),
        axis.title = element_text(size=14))+
  labs(y=expression('MAE'[p]), col = "Practise")+
  ylim(0,2)
dev.off()
```


Validation -- boxplot

```{r}
pdf('figures/boxplot_validation.pdf',height=4,width=5.5)
ggplot(val_mae) +
  geom_point(aes(x=country, y=mae_0, col=regreened), alpha=0.25, position='jitter')+
  geom_boxplot(aes(x=country, y=mae_0, col=regreened), outlier.alpha = 0)+
  scale_colour_brewer(palette="Accent", direction=-1, labels=c('No','Yes'))+
  ylim(0,10)+
  theme(axis.title.x = element_blank(),
        panel.spacing = unit(0, "lines"),
        panel.background = element_rect(fill='white', colour='white'),
        panel.grid.major = element_line(color='grey',linewidth = 0.1))+
  labs(y=expression('MAE'[p]), color='Greened', country=c('E','N','R'))
dev.off()
```

MAE goodness of fit

```{r}
roc <- roc(val_mae$regreened ~ val_mae$rmse_test, plot=T, print.auc=T)
label_seq <- c(seq(1,length(roc$thresholds), 60), length(roc$thresholds))

pdf('figures/roc_validation_rmse.pdf',height=5,width=5)
ggplot()+
  geom_line(aes(x=roc$specificities, y=roc$sensitivities))+
  scale_x_reverse()+
  coord_equal()+
  annotate('text', x=0.25,y=0.25, label=paste('AUC =', round(roc$auc,2)), size=3) +
  geom_text(aes(label=round(roc$threshold[label_seq],2),
                x=roc$specificities[label_seq],
                y=roc$sensitivities[label_seq]),
            size=2, nudge_x = 0.035, nudge_y = -0.01)+
  theme(panel.spacing = unit(0, "lines"),
        panel.background = element_rect(fill='white', colour='grey'),
        panel.grid.major = element_line(color='grey',linewidth = 0.1))+
  labs(y='Recall', x='Precision')
dev.off()
```


Training/test RMSE
```{r}
# Training RMSE
pdf('figures/training_rmse.pdf', height = 4, width = 7)
plt_stat_fit %>% 
  ggplot()+
  geom_boxplot(aes(x=country,y=rmse_train), alpha=0.1)+
  theme(panel.spacing = unit(0, "lines"),
        panel.background = element_rect(fill='white', colour='grey'),
        panel.grid.major = element_line(color='grey',linewidth = 0.1),
        axis.title.x = element_blank(),
        axis.text = element_text(size=12),
        axis.title = element_text(size=14),
        legend.text = element_text(size=12),
        legend.title = element_text(size=14))+
  labs(y='Training RMSE')
dev.off()

# Test RMSE
pdf('figures/test_rmse_hectare.pdf', height = 4, width = 7)
plt_stat_fit %>% 
  filter(Hectare < 25) %>% 
  ggplot()+
  geom_point(aes(x = Hectare, rmse_test),alpha=0.1,size=0.3)+
  theme(panel.spacing = unit(0, "lines"),
        panel.background = element_rect(fill='white', colour='grey'),
        panel.grid.major = element_line(color='grey',linewidth = 0.1),
        axis.text = element_text(size=10),
        axis.title = element_text(size=12),
        legend.text = element_text(size=12),
        legend.title = element_text(size=14))+
  labs(x = 'Plot size (ha)', y = 'Test RMSE')
dev.off()
```


Relation NDVI - rainfall per country

```{r}
pdf("figures/ndvi_prcp_cntr.pdf", width = 8, height = 6)
l8_ts %>% 
  group_by(country, yearmon) %>% 
  summarise(ndvi = mean(ndvi, na.rm=T),
            prcp = mean(prcp_month)) %>% 
  ggplot()+
  geom_line(aes(x=yearmon, y=ndvi))+
  geom_line(aes(x=yearmon, y=prcp/1200), col="darkblue",lty=2)+
  scale_y_continuous(
    name = 'NDVI',
    sec.axis = sec_axis(~.*1200, name='Precipiation (mm/month)'))+
  scale_color_viridis(discrete=T, option='B')+
  facet_wrap(facets = vars(country), nrow=7, strip.position = 'right')+
  theme(panel.spacing = unit(0, "lines"),
        panel.background = element_rect(fill='white', colour='grey'),
        panel.grid.major = element_line(color='grey',linewidth = 0.1),
        axis.title.x = element_blank(),
        panel.grid.minor.x = element_line(color='grey', linewidth = 0.1),
        axis.text = element_text(size=12),
        axis.title = element_text(size=14))
dev.off()
```

Cumlative regreening effect per country

```{r}
pdf('figures/cumulative_regreening.pdf', width = 9.5, height = 5)
l8_fc_plt_dt %>% 
  filter(yearmon > as.Date('2017-01-01')) %>%
  arrange(country) %>% 
  mutate(AEp = if_else(ndvi_int > upper, ndvi_int - upper, 0)) %>% 
  group_by(country, yearmon) %>% 
  summarise(res_sum = sum(AEp, na.rm=T),
            prcp = mean(prcp, na.rm=T)) %>% 
  mutate(SAEp = cumsum(res_sum),
        MAEp_total = sum(res_sum)) %>% 
  ggplot()+
  geom_line(aes(x = yearmon, y = SAEp/MAEp_total*100, col = country),lwd=0.8)+
  geom_ribbon(aes(x = yearmon, ymin = (SAEp/MAEp_total)*100, ymax = (SAEp/MAEp_total*100)+((prcp/30)), fill = country), alpha=0.25)+
  scale_y_continuous(name="Cumlative regreening (%)", limits=c(0, 100),
  breaks = scales::pretty_breaks(n = 4))+
  scale_fill_viridis(discrete=T, option='B')+
  scale_color_viridis(discrete=T, option='B')+
    theme(panel.spacing = unit(0, "lines"),
        panel.background = element_rect(fill='white', colour='grey'),
        panel.grid.major = element_line(color='grey',linewidth = 0.05),
        axis.title.x = element_blank(),
        panel.grid.minor = element_line(color='grey', linewidth = 0.05),
        axis.text = element_text(size=12),
        axis.title = element_text(size=12),
        axis.text.y = element_text(colour = c("black", "black", "black", "black", "black", "transparent")))+
  labs(y='Cumulative regreening (%)', fill='Precipitation', col='Country', lty='Restoration practice')+
  ylim(0,120)
dev.off()
```